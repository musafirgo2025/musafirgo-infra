name: ACA Dev Deploy (Reusable)

on:
  workflow_call:
    inputs:
      imageRef:
        description: "Image à déployer (ex: musafirgoacr.azurecr.io/musafirgo-itinerary-service:<tag>)"
        required: true
        type: string
      resourceGroup:
        description: "Resource Group cible"
        required: false
        default: "musafirgo-dev-rg"
        type: string
      location:
        description: "Azure region"
        required: false
        default: "westeurope"
        type: string
  workflow_dispatch:          # permet de lancer depuis ce repo même sans secrets
    inputs:
      imageRef:
        description: "Image à déployer (ex: musafirgoacr.azurecr.io/musafirgo-itinerary-service:bootstrap)"
        required: true
      resourceGroup:
        description: "Resource Group cible"
        required: false
        default: "musafirgo-dev-rg"
      location:
        description: "Azure region"
        required: false
        default: "westeurope"
      clientId:
        description: "AZURE_CLIENT_ID (optionnel si pas de secret dans ce repo)"
        required: false
        default: ""
      tenantId:
        description: "AZURE_TENANT_ID (optionnel si pas de secret dans ce repo)"
        required: false
        default: ""
      subscriptionId:
        description: "AZURE_SUBSCRIPTION_ID (optionnel si pas de secret dans ce repo)"
        required: false
        default: ""

jobs:
  deploy-aca:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    env:
      RG: ${{ inputs.resourceGroup }}
      LOCATION: ${{ inputs.location }}
      DEPLOY_NAME: aca-dev

    steps:
      - uses: actions/checkout@v4

      # Résout l'image (compatible workflow_call & workflow_dispatch)
      - name: Resolve imageRef
        id: img
        shell: bash
        run: |
          IMG="${{ inputs.imageRef }}"
          if [ -z "$IMG" ]; then IMG="${{ github.event.inputs.imageRef }}"; fi
          echo "image=$IMG" >> "$GITHUB_OUTPUT"
          echo "Using image: $IMG"

      # Résout les identifiants Azure :
      # 1) depuis les secrets (cas reusable via 'secrets: inherit'),
      # 2) sinon depuis les inputs (cas workflow_dispatch manuel).
      - name: Resolve Azure IDs
        id: ids
        shell: bash
        run: |
          CID="${{ secrets.AZURE_CLIENT_ID }}"
          TID="${{ secrets.AZURE_TENANT_ID }}"
          SID="${{ secrets.AZURE_SUBSCRIPTION_ID }}"
          [ -z "$CID" ] && CID="${{ inputs.clientId }}"
          [ -z "$TID" ] && TID="${{ inputs.tenantId }}"
          [ -z "$SID" ] && SID="${{ inputs.subscriptionId }}"
          echo "client_id=$CID" >> $GITHUB_OUTPUT
          echo "tenant_id=$TID" >> $GITHUB_OUTPUT
          echo "sub_id=$SID" >> $GITHUB_OUTPUT
          if [ -z "$CID" ] || [ -z "$TID" ] || [ -z "$SID" ]; then
            echo "::error::Missing Azure IDs. Provide repo secrets (AZURE_CLIENT_ID / AZURE_TENANT_ID / AZURE_SUBSCRIPTION_ID)"
            echo "::error::or fill inputs (clientId / tenantId / subscriptionId) when using workflow_dispatch."
            exit 1
          fi
          echo "Azure IDs resolved ✓"

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ steps.ids.outputs.client_id }}
          tenant-id:  ${{ steps.ids.outputs.tenant_id }}
          subscription-id: ${{ steps.ids.outputs.sub_id }}

      - name: Ensure Resource Group
        run: az group create -n "$RG" -l "$LOCATION" || echo "RG exists"

      - name: What-if (Bicep)
        run: |
          az deployment group what-if \
            --name "$DEPLOY_NAME" \
            --resource-group "$RG" \
            --template-file dev/iac/aca-dev.bicep \
            --parameters @dev/iac/aca-dev.parameters.json \
            --parameters containerImage="${{ steps.img.outputs.image }}"

      - name: Deploy (Bicep) - no output (CLI bug workaround)
        run: |
          set -e
          az deployment group create \
            --name "$DEPLOY_NAME" \
            --resource-group "$RG" \
            --template-file dev/iac/aca-dev.bicep \
            --parameters @dev/iac/aca-dev.parameters.json \
            --parameters containerImage="${{ steps.img.outputs.image }}" \
            --only-show-errors \
            --output none

      - name: Fetch deployment outputs (FQDN)
        run: |
          az deployment group show -g "$RG" -n "$DEPLOY_NAME" -o jsonc
          FQDN=$(az deployment group show -g "$RG" -n "$DEPLOY_NAME" --query "properties.outputs.containerAppFqdn.value" -o tsv || true)
          if [ -n "$FQDN" ]; then
            echo "Container App URL: https://${FQDN}"
          else
            echo "Container App FQDN not available yet (resource creation in progress or first revision failing to pull image)."
          fi

      - name: Show Container App FQDN
        run: |
          FQDN=$(az deployment group show -g "$RG" -n "$DEPLOY_NAME" --query "properties.outputs.containerAppFqdn.value" -o tsv || true)
          echo "Container App URL: https://${FQDN}"