name: ACA Dev Deploy (Reusable)

on:
  workflow_call:
    inputs:
      imageRef:
        description: "Image à déployer (ex: musafirgoacr.azurecr.io/musafirgo-itinerary-service:<tag>)"
        required: true
        type: string
      resourceGroup:
        description: "Resource Group cible"
        required: false
        default: "musafirgo-dev-rg"
        type: string
      location:
        description: "Azure region"
        required: false
        default: "westeurope"
        type: string
  workflow_dispatch:
    inputs:
      imageRef:
        description: "Image à déployer (ex: musafirgoacr.azurecr.io/musafirgo-itinerary-service:bootstrap)"
        required: true
      resourceGroup:
        description: "Resource Group cible"
        required: false
        default: "musafirgo-dev-rg"
      location:
        description: "Azure region"
        required: false
        default: "westeurope"
      clientId:
        description: "AZURE_CLIENT_ID (si pas de secrets dans ce repo)"
        required: false
        default: ""
      tenantId:
        description: "AZURE_TENANT_ID (si pas de secrets dans ce repo)"
        required: false
        default: ""
      subscriptionId:
        description: "AZURE_SUBSCRIPTION_ID (si pas de secrets dans ce repo)"
        required: false
        default: ""

jobs:
  deploy-aca:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    env:
      RG: ${{ inputs.resourceGroup }}
      LOCATION: ${{ inputs.location }}
      DEPLOY_NAME: aca-dev

    steps:
      # IMPORTANT: quand ce workflow est appelé depuis un autre repo,
      # on doit *explicitement* récupérer les fichiers d'infra.
      - name: Checkout infra repo (this workflow's files)
        uses: actions/checkout@v4
        with:
          repository: musafirgo2025/musafirgo-infra
          ref: main
          path: infra

      - name: Resolve imageRef
        id: img
        shell: bash
        run: |
          IMG="${{ inputs.imageRef }}"
          if [ -z "$IMG" ]; then IMG="${{ github.event.inputs.imageRef }}"; fi
          echo "image=$IMG" >> "$GITHUB_OUTPUT"
          echo "Using image: $IMG"

      - name: Resolve Azure IDs
        id: ids
        shell: bash
        run: |
          CID="${{ secrets.AZURE_CLIENT_ID }}"
          TID="${{ secrets.AZURE_TENANT_ID }}"
          SID="${{ secrets.AZURE_SUBSCRIPTION_ID }}"
          [ -z "$CID" ] && CID="${{ inputs.clientId }}"
          [ -z "$TID" ] && TID="${{ inputs.tenantId }}"
          [ -z "$SID" ] && SID="${{ inputs.subscriptionId }}"
          echo "client_id=$CID" >> $GITHUB_OUTPUT
          echo "tenant_id=$TID" >> $GITHUB_OUTPUT
          echo "sub_id=$SID" >> $GITHUB_OUTPUT
          if [ -z "$CID" ] || [ -z "$TID" ] || [ -z "$SID" ]; then
            echo "::error::Missing Azure IDs. Provide repo secrets (AZURE_CLIENT_ID / AZURE_TENANT_ID / AZURE_SUBSCRIPTION_ID)"
            echo "::error::or fill inputs (clientId / tenantId / subscriptionId) when using workflow_dispatch."
            exit 1
          fi
          echo "Azure IDs resolved ✓"

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ steps.ids.outputs.client_id }}
          tenant-id:  ${{ steps.ids.outputs.tenant_id }}
          subscription-id: ${{ steps.ids.outputs.sub_id }}

      - name: Ensure resource providers (idempotent)
        shell: bash
        run: |
          for p in Microsoft.ManagedIdentity Microsoft.App Microsoft.ContainerRegistry Microsoft.OperationalInsights Microsoft.Authorization; do
            state=$(az provider show -n $p --query registrationState -o tsv 2>/dev/null || echo NotRegistered)
            if [ "$state" != "Registered" ]; then
              echo "Register $p…"
              az provider register -n $p --wait
            fi
            az provider show -n $p -o table
          done

      - name: Ensure Resource Group
        run: az group create -n "$RG" -l "$LOCATION" || echo "RG exists"

      - name: Ensure jq (if missing)
        shell: bash
        run: |
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update -y
            sudo apt-get install -y jq
          fi

      # ===== Workaround fiable: compiler Bicep -> JSON et déployer via ARM REST =====

      - name: Build Bicep to JSON
        working-directory: infra
        run: |
          az bicep install
          az bicep build --file dev/iac/aca-dev.bicep --outfile dev/iac/aca-dev.compiled.json
          ls -l dev/iac/aca-dev.compiled.json

      - name: What-if (compiled JSON)
        working-directory: infra
        run: |
          az deployment group what-if \
            --name "$DEPLOY_NAME" \
            --resource-group "$RG" \
            --template-file dev/iac/aca-dev.compiled.json \
            --parameters @dev/iac/aca-dev.parameters.json \
            --parameters containerImage="${{ steps.img.outputs.image }}"

      - name: Deploy (compiled JSON) via ARM REST
        working-directory: infra
        env:
          SUB_ID: ${{ steps.ids.outputs.sub_id }}
        run: |
          set -e
          TEMPLATE_JSON=$(jq -c '.' dev/iac/aca-dev.compiled.json)
          PARAMS_OBJ=$(jq -c --arg img "${{ steps.img.outputs.image }}" '.parameters.containerImage.value=$img | .parameters' dev/iac/aca-dev.parameters.json)
          BODY=$(jq -n \
            --arg mode "Incremental" \
            --argjson template "$TEMPLATE_JSON" \
            --argjson parameters "$PARAMS_OBJ" \
            '{properties:{mode:$mode, template:$template, parameters:$parameters}}')

          az rest \
            --method PUT \
            --url "https://management.azure.com/subscriptions/${SUB_ID}/resourcegroups/${RG}/providers/Microsoft.Resources/deployments/${DEPLOY_NAME}?api-version=2022-09-01" \
            --body "$BODY" \
            --headers "Content-Type=application/json"

      - name: Wait for deployment completion & show outputs
        shell: bash
        run: |
          set -e
          for i in {1..60}; do
            state=$(az deployment group show -g "$RG" -n "$DEPLOY_NAME" --query "properties.provisioningState" -o tsv 2>/dev/null || echo "Pending")
            echo "ProvisioningState=$state (try $i/60)"
            if [ "$state" = "Succeeded" ]; then break; fi
            if [ "$state" = "Failed" ] || [ "$state" = "Canceled" ]; then
              echo "Deployment $state"
              az deployment group show -g "$RG" -n "$DEPLOY_NAME" -o jsonc || true
              exit 1
            fi
            sleep 10
          done

          FQDN=$(az deployment group show -g "$RG" -n "$DEPLOY_NAME" --query "properties.outputs.containerAppFqdn.value" -o tsv || true)
          if [ -n "$FQDN" ]; then
            echo "Container App URL: https://${FQDN}"
          else
            echo "Container App FQDN not available yet (OK if bootstrap image doesn't exist)."
          fi
