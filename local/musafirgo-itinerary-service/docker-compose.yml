services:
  # Base de données PostgreSQL
  postgres:
    image: postgres:15.6-alpine
    container_name: musafirgo-itinerary-postgres
    environment:
      POSTGRES_DB: itinerary
      POSTGRES_USER: itinerary
      POSTGRES_PASSWORD: itinerary
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./data/dump-data.sql:/docker-entrypoint-initdb.d/01-dump-data.sql:ro
    networks:
      - musafirgo-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U itinerary -d itinerary"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Cache Redis
  redis:
    image: redis:7.2-alpine
    container_name: musafirgo-itinerary-redis
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    networks:
      - musafirgo-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru

  # Service Itinerary (Spring Boot)
  itinerary-service:
    image: openjdk:17-jdk-slim
    container_name: musafirgo-itinerary-app
    working_dir: /app
    environment:
      # Configuration base de données
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: itinerary
      DB_USER: itinerary
      DB_PASSWORD: itinerary
      
      # Configuration Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ""
      
      # Configuration Spring Boot
      SPRING_PROFILES_ACTIVE: dev
      SERVER_PORT: 8080
      
      # Configuration JVM optimisée
      JAVA_OPTS: "-Xms512m -Xmx1024m -XX:+UseG1GC -XX:+UseStringDeduplication"
      
      # Configuration logging
      LOGGING_LEVEL_ROOT: INFO
      LOGGING_LEVEL_COM_MUSAFIRGO: DEBUG
    ports:
      - "8080:8080"
    volumes:
      - ./logs:/app/logs
      - ./data/media-files:/app/media:ro
      - ../../../musafirgo-itinerary-service/target:/app/target:ro
    networks:
      - musafirgo-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: >
      sh -c "
        apt-get update && 
        apt-get install -y curl && 
        java -jar /app/target/*.jar
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  # Interface d'administration de la base de données
  adminer:
    image: adminer:latest
    container_name: musafirgo-itinerary-adminer
    ports:
      - "8081:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
      ADMINER_DESIGN: pepa-linha-dark
    networks:
      - musafirgo-network
    depends_on:
      - postgres
    restart: unless-stopped

  # Interface Redis (optionnelle)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: musafirgo-itinerary-redis-commander
    ports:
      - "8082:8081"
    environment:
      REDIS_HOSTS: local:redis:6379
    networks:
      - musafirgo-network
    depends_on:
      - redis
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  musafirgo-network:
    driver: bridge
