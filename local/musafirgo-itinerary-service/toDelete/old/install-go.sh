#!/bin/bash
# Script d'installation automatique de Go pour Linux/macOS

echo "=== Installation de Go pour MusafirGO Pipeline ==="

# V√©rifier si Go est d√©j√† install√©
if command -v go &> /dev/null; then
    echo "‚úÖ Go est d√©j√† install√©: $(go version)"
    echo "Vous pouvez maintenant ex√©cuter: ./build-and-run.sh"
    exit 0
fi

# D√©tecter l'OS
OS=""
ARCH=""
GO_VERSION="1.21.5"

case "$(uname -s)" in
    Linux*)
        OS="linux"
        ;;
    Darwin*)
        OS="darwin"
        ;;
    *)
        echo "‚ùå OS non support√©: $(uname -s)"
        echo "Veuillez installer Go manuellement depuis: https://golang.org/dl/"
        exit 1
        ;;
esac

case "$(uname -m)" in
    x86_64)
        ARCH="amd64"
        ;;
    arm64|aarch64)
        ARCH="arm64"
        ;;
    *)
        echo "‚ùå Architecture non support√©e: $(uname -m)"
        echo "Veuillez installer Go manuellement depuis: https://golang.org/dl/"
        exit 1
        ;;
esac

echo "üîç OS d√©tect√©: $OS"
echo "üîç Architecture d√©tect√©e: $ARCH"

# URL de t√©l√©chargement
GO_URL="https://go.dev/dl/go${GO_VERSION}.${OS}-${ARCH}.tar.gz"
GO_FILE="go${GO_VERSION}.${OS}-${ARCH}.tar.gz"
GO_INSTALL_DIR="/usr/local"

echo "üì• T√©l√©chargement de Go $GO_VERSION..."

# T√©l√©charger Go
if command -v wget &> /dev/null; then
    wget -O "$GO_FILE" "$GO_URL"
elif command -v curl &> /dev/null; then
    curl -L -o "$GO_FILE" "$GO_URL"
else
    echo "‚ùå wget ou curl requis pour t√©l√©charger Go"
    exit 1
fi

if [ ! -f "$GO_FILE" ]; then
    echo "‚ùå Erreur lors du t√©l√©chargement de Go"
    exit 1
fi

echo "‚úÖ T√©l√©chargement termin√©"

# V√©rifier les permissions sudo
if [ "$EUID" -ne 0 ]; then
    echo "üîê Installation n√©cessite des privil√®ges sudo..."
    SUDO_CMD="sudo"
else
    SUDO_CMD=""
fi

echo "üîß Installation de Go..."

# Supprimer l'ancienne installation si elle existe
$SUDO_CMD rm -rf "$GO_INSTALL_DIR/go"

# Extraire Go
$SUDO_CMD tar -C "$GO_INSTALL_DIR" -xzf "$GO_FILE"

# Nettoyer le fichier t√©l√©charg√©
rm "$GO_FILE"

echo "‚úÖ Installation termin√©e"

# Configurer le PATH
echo "‚öôÔ∏è  Configuration du PATH..."

# Ajouter Go au PATH pour la session actuelle
export PATH="$GO_INSTALL_DIR/go/bin:$PATH"

# Ajouter Go au PATH de mani√®re permanente
SHELL_CONFIG=""
if [ -f "$HOME/.bashrc" ]; then
    SHELL_CONFIG="$HOME/.bashrc"
elif [ -f "$HOME/.zshrc" ]; then
    SHELL_CONFIG="$HOME/.zshrc"
elif [ -f "$HOME/.profile" ]; then
    SHELL_CONFIG="$HOME/.profile"
fi

if [ -n "$SHELL_CONFIG" ]; then
    if ! grep -q "go/bin" "$SHELL_CONFIG"; then
        echo "" >> "$SHELL_CONFIG"
        echo "# Go" >> "$SHELL_CONFIG"
        echo "export PATH=\"$GO_INSTALL_DIR/go/bin:\$PATH\"" >> "$SHELL_CONFIG"
        echo "export GOPATH=\"\$HOME/go\"" >> "$SHELL_CONFIG"
        echo "export GOROOT=\"$GO_INSTALL_DIR/go\"" >> "$SHELL_CONFIG"
        echo "‚úÖ Configuration ajout√©e √† $SHELL_CONFIG"
    fi
fi

# Cr√©er le r√©pertoire de travail Go
mkdir -p "$HOME/go"
echo "üìÅ R√©pertoire Go cr√©√©: $HOME/go"

# V√©rifier l'installation
if command -v go &> /dev/null; then
    echo "‚úÖ Go install√© avec succ√®s: $(go version)"
else
    echo "‚ö†Ô∏è  Go install√© mais pas encore disponible dans le PATH"
    echo "Veuillez red√©marrer votre terminal ou ex√©cuter:"
    echo "export PATH=\"$GO_INSTALL_DIR/go/bin:\$PATH\""
fi

echo ""
echo "üéâ Installation de Go termin√©e avec succ√®s !"
echo ""
echo "üìã Prochaines √©tapes:"
echo "1. Red√©marrez votre terminal"
echo "2. Ex√©cutez: ./build-and-run.sh"
echo "3. Ou testez avec: go version"
echo ""
echo "=== INSTALLATION TERMIN√âE ==="
